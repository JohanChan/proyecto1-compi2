/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,20],$V1=[1,32],$V2=[1,33],$V3=[1,34],$V4=[1,35],$V5=[1,36],$V6=[1,21],$V7=[1,22],$V8=[1,23],$V9=[1,24],$Va=[1,25],$Vb=[1,26],$Vc=[1,27],$Vd=[1,28],$Ve=[1,29],$Vf=[1,30],$Vg=[1,31],$Vh=[5,25,29,30,31,32,33,34,37,38,40,42,45,47,48,49,50,52,53,54,57],$Vi=[1,52],$Vj=[1,72],$Vk=[1,67],$Vl=[1,65],$Vm=[1,66],$Vn=[1,68],$Vo=[1,69],$Vp=[1,70],$Vq=[1,71],$Vr=[1,73],$Vs=[1,74],$Vt=[1,75],$Vu=[25,58],$Vv=[8,28],$Vw=[2,22],$Vx=[1,77],$Vy=[1,98],$Vz=[1,97],$VA=[1,99],$VB=[1,100],$VC=[1,101],$VD=[1,102],$VE=[1,103],$VF=[1,104],$VG=[1,105],$VH=[1,106],$VI=[1,107],$VJ=[1,108],$VK=[1,109],$VL=[8,28,36,39,46,59,61,63,64,65,66,67,68,69,70,71,72,73,74],$VM=[28,36],$VN=[8,28,36,39,46,59,73,74],$VO=[1,151],$VP=[8,28,36,39,46,59,61,63,67,68,69,70,71,72,73,74],$VQ=[8,28,36,39,46,59,67,68,69,70,71,72,73,74],$VR=[1,176],$VS=[40,45,47];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaracion":7,"PYC":8,"asignacion":9,"imprimir":10,"if_instr":11,"switch_instr":12,"while_instr":13,"dowhile_instr":14,"for_instr":15,"break_instr":16,"continue_instr":17,"funcion_instr":18,"llamada_instr":19,"return_instr":20,"arreglos_instr":21,"modArreglos_instr":22,"tipo":23,"ListaId":24,"IDENTIFICADOR":25,"IGUAL":26,"expresion":27,"COMA":28,"INT":29,"DOUBLE":30,"BOOLEAN":31,"CHAR":32,"STRING":33,"PRINT":34,"PARA":35,"PARC":36,"PRINTLN":37,"IF":38,"LLAVEA":39,"LLAVEC":40,"ELSE":41,"SWITCH":42,"listaCases":43,"default_instr":44,"CASE":45,"DOSP":46,"DEFAULT":47,"WHILE":48,"DO":49,"FOR":50,"IN":51,"BREAK":52,"CONTINUE":53,"VOID":54,"parametros":55,"parametros_llamada":56,"RETURN":57,"CORA":58,"CORC":59,"lista_expr":60,"MENOS":61,"NOT":62,"MAS":63,"MULTI":64,"DIV":65,"MOD":66,"MENORQ":67,"MENORIGUAL":68,"MAYORQ":69,"MAYORIGUAL":70,"IGUALIGUAL":71,"DIFERENCIA":72,"AND":73,"OR":74,"DECIMAL":75,"ENTERO":76,"CADENA":77,"CARACTER":78,"TRUE":79,"FALSE":80,"NULL":81,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"PYC",25:"IDENTIFICADOR",26:"IGUAL",28:"COMA",29:"INT",30:"DOUBLE",31:"BOOLEAN",32:"CHAR",33:"STRING",34:"PRINT",35:"PARA",36:"PARC",37:"PRINTLN",38:"IF",39:"LLAVEA",40:"LLAVEC",41:"ELSE",42:"SWITCH",45:"CASE",46:"DOSP",47:"DEFAULT",48:"WHILE",49:"DO",50:"FOR",51:"IN",52:"BREAK",53:"CONTINUE",54:"VOID",57:"RETURN",58:"CORA",59:"CORC",60:"lista_expr",61:"MENOS",62:"NOT",63:"MAS",64:"MULTI",65:"DIV",66:"MOD",67:"MENORQ",68:"MENORIGUAL",69:"MAYORQ",70:"MAYORIGUAL",71:"IGUALIGUAL",72:"DIFERENCIA",73:"AND",74:"OR",75:"DECIMAL",76:"ENTERO",77:"CADENA",78:"CARACTER",79:"TRUE",80:"FALSE",81:"NULL"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,2],[6,1],[6,2],[6,2],[6,1],[6,2],[6,2],[6,2],[6,2],[7,2],[7,4],[24,3],[24,1],[23,1],[23,1],[23,1],[23,1],[23,1],[9,3],[10,4],[10,4],[11,7],[11,5],[11,11],[11,9],[12,8],[12,7],[12,7],[43,5],[43,4],[44,3],[13,7],[14,8],[15,7],[15,11],[15,11],[16,1],[17,1],[18,8],[18,7],[18,8],[18,7],[55,4],[55,2],[19,4],[19,3],[56,3],[56,1],[20,2],[20,1],[21,7],[21,6],[22,4],[27,2],[27,2],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
}
},
table: [{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,25:$V0,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,37:$V7,38:$V8,42:$V9,48:$Va,49:$Vb,50:$Vc,52:$Vd,53:$Ve,54:$Vf,57:$Vg},{1:[3]},{5:[1,37],6:38,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,25:$V0,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,37:$V7,38:$V8,42:$V9,48:$Va,49:$Vb,50:$Vc,52:$Vd,53:$Ve,54:$Vf,57:$Vg},o($Vh,[2,3]),{8:[1,39]},{8:[1,40]},{8:[1,41]},o($Vh,[2,7]),o($Vh,[2,8]),o($Vh,[2,9]),{8:[1,42]},o($Vh,[2,11]),{8:[1,43]},{8:[1,44]},o($Vh,[2,14]),{8:[1,45]},{8:[1,46]},{8:[1,47]},{8:[1,48]},{24:49,25:[1,50],58:[1,51]},{26:$Vi,35:[1,53],58:[1,54]},{35:[1,55]},{35:[1,56]},{35:[1,57]},{35:[1,58]},{35:[1,59]},{39:[1,60]},{25:[1,61],35:[1,62]},{8:[2,46]},{8:[2,47]},{25:[1,63]},{8:[2,59],25:$Vj,27:64,35:$Vk,61:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt},o($Vu,[2,23]),o($Vu,[2,24]),o($Vu,[2,25]),o($Vu,[2,26]),o($Vu,[2,27]),{1:[2,1]},o($Vh,[2,2]),o($Vh,[2,4]),o($Vh,[2,5]),o($Vh,[2,6]),o($Vh,[2,10]),o($Vh,[2,12]),o($Vh,[2,13]),o($Vh,[2,15]),o($Vh,[2,16]),o($Vh,[2,17]),o($Vh,[2,18]),{8:[2,19],28:[1,76]},o($Vv,$Vw,{26:$Vx,35:[1,78]}),{59:[1,79]},{25:$Vj,27:80,35:$Vk,61:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt},{25:$Vj,27:83,35:$Vk,36:[1,82],56:81,61:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt},{25:$Vj,27:84,35:$Vk,61:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt},{25:$Vj,27:85,35:$Vk,61:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt},{25:$Vj,27:86,35:$Vk,61:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt},{25:$Vj,27:87,35:$Vk,61:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt},{25:$Vj,27:88,35:$Vk,61:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt},{25:$Vj,27:89,35:$Vk,61:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt},{4:90,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,25:$V0,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,37:$V7,38:$V8,42:$V9,48:$Va,49:$Vb,50:$Vc,52:$Vd,53:$Ve,54:$Vf,57:$Vg},{51:[1,91]},{7:92,9:93,23:94,25:[1,95],29:$V1,30:$V2,31:$V3,32:$V4,33:$V5},{35:[1,96]},{8:[2,58],61:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK},{25:$Vj,27:110,35:$Vk,61:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt},{25:$Vj,27:111,35:$Vk,61:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt},{25:$Vj,27:112,35:$Vk,61:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt},o($VL,[2,79]),o($VL,[2,80]),o($VL,[2,81]),o($VL,[2,82]),o($VL,[2,83],{58:[1,113]}),o($VL,[2,84]),o($VL,[2,85]),o($VL,[2,86]),{25:[1,114]},{25:$Vj,27:115,35:$Vk,61:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt},{23:118,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,36:[1,117],55:116},{26:[1,119]},{8:[2,28],61:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK},{28:[1,121],36:[1,120]},{8:[2,55]},o($VM,[2,57],{61:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK}),{59:[1,122],61:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK},{36:[1,123],61:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK},{36:[1,124],61:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK},{36:[1,125],61:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK},{36:[1,126],61:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK},{36:[1,127],61:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK},{6:38,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,25:$V0,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,37:$V7,38:$V8,40:[1,128],42:$V9,48:$Va,49:$Vb,50:$Vc,52:$Vd,53:$Ve,54:$Vf,57:$Vg},{25:$Vj,27:129,35:$Vk,61:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt},{8:[1,130]},{8:[1,131]},{24:49,25:[1,132]},{26:$Vi},{23:118,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,36:[1,134],55:133},{25:$Vj,27:135,35:$Vk,61:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt},{25:$Vj,27:136,35:$Vk,61:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt},{25:$Vj,27:137,35:$Vk,61:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt},{25:$Vj,27:138,35:$Vk,61:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt},{25:$Vj,27:139,35:$Vk,61:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt},{25:$Vj,27:140,35:$Vk,61:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt},{25:$Vj,27:141,35:$Vk,61:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt},{25:$Vj,27:142,35:$Vk,61:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt},{25:$Vj,27:143,35:$Vk,61:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt},{25:$Vj,27:144,35:$Vk,61:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt},{25:$Vj,27:145,35:$Vk,61:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt},{25:$Vj,27:146,35:$Vk,61:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt},{25:$Vj,27:147,35:$Vk,61:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt},o($VL,[2,63]),o($VN,[2,64],{61:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI}),{36:[1,148],61:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK},{25:$Vj,27:149,35:$Vk,61:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt},o($Vv,[2,21]),{8:[2,20],61:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK},{28:$VO,36:[1,150]},{39:[1,152]},{25:[1,153]},{58:[1,154]},{8:[2,54]},{25:$Vj,27:155,35:$Vk,61:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt},{8:[2,62]},{8:[2,29]},{8:[2,30]},{6:157,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,25:$V0,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,37:$V7,38:$V8,39:[1,156],42:$V9,48:$Va,49:$Vb,50:$Vc,52:$Vd,53:$Ve,54:$Vf,57:$Vg},{39:[1,158]},{39:[1,159]},{48:[1,160]},{39:[1,161],61:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK},{25:$Vj,27:162,35:$Vk,61:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt},{25:$Vj,27:163,35:$Vk,61:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt},o($Vv,$Vw,{26:$Vx}),{28:$VO,36:[1,164]},{39:[1,165]},o($VP,[2,65],{64:$VA,65:$VB,66:$VC}),o($VP,[2,66],{64:$VA,65:$VB,66:$VC}),o($VL,[2,67]),o($VL,[2,68]),o($VL,[2,69]),o($VQ,[2,70],{61:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC}),o($VQ,[2,71],{61:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC}),o($VQ,[2,72],{61:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC}),o($VQ,[2,73],{61:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC}),o($VQ,[2,74],{61:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC}),o($VQ,[2,75],{61:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC}),o($VN,[2,76],{61:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI}),o([8,28,36,39,46,59,74],[2,77],{61:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ}),o($VL,[2,78]),{59:[1,166],61:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK},{39:[1,167]},{23:168,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5},{4:169,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,25:$V0,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,37:$V7,38:$V8,42:$V9,48:$Va,49:$Vb,50:$Vc,52:$Vd,53:$Ve,54:$Vf,57:$Vg},o($VM,[2,53]),{59:[1,171],60:[1,170]},o($VM,[2,56],{61:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK}),{4:172,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,25:$V0,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,37:$V7,38:$V8,42:$V9,48:$Va,49:$Vb,50:$Vc,52:$Vd,53:$Ve,54:$Vf,57:$Vg},o($Vh,[2,32]),{43:173,44:174,45:[1,175],47:$VR},{4:177,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,25:$V0,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,37:$V7,38:$V8,42:$V9,48:$Va,49:$Vb,50:$Vc,52:$Vd,53:$Ve,54:$Vf,57:$Vg},{35:[1,178]},{4:179,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,25:$V0,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,37:$V7,38:$V8,42:$V9,48:$Va,49:$Vb,50:$Vc,52:$Vd,53:$Ve,54:$Vf,57:$Vg},{8:[1,180],61:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK},{8:[1,181],61:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK},{39:[1,182]},{4:183,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,25:$V0,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,37:$V7,38:$V8,42:$V9,48:$Va,49:$Vb,50:$Vc,52:$Vd,53:$Ve,54:$Vf,57:$Vg},o($VL,[2,87]),{4:184,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,25:$V0,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,37:$V7,38:$V8,42:$V9,48:$Va,49:$Vb,50:$Vc,52:$Vd,53:$Ve,54:$Vf,57:$Vg},{25:[1,185]},{6:38,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,25:$V0,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,37:$V7,38:$V8,40:[1,186],42:$V9,48:$Va,49:$Vb,50:$Vc,52:$Vd,53:$Ve,54:$Vf,57:$Vg},{59:[1,187]},{8:[2,61]},{6:38,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,25:$V0,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,37:$V7,38:$V8,40:[1,188],42:$V9,48:$Va,49:$Vb,50:$Vc,52:$Vd,53:$Ve,54:$Vf,57:$Vg},{40:[1,190],44:189,45:[1,191],47:$VR},{40:[1,192]},{25:$Vj,27:193,35:$Vk,61:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt},{46:[1,194]},{6:38,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,25:$V0,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,37:$V7,38:$V8,40:[1,195],42:$V9,48:$Va,49:$Vb,50:$Vc,52:$Vd,53:$Ve,54:$Vf,57:$Vg},{25:$Vj,27:196,35:$Vk,61:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt},{6:38,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,25:$V0,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,37:$V7,38:$V8,40:[1,197],42:$V9,48:$Va,49:$Vb,50:$Vc,52:$Vd,53:$Ve,54:$Vf,57:$Vg},{25:$Vj,27:198,35:$Vk,61:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt},{25:$Vj,27:199,35:$Vk,61:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt},{4:200,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,25:$V0,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,37:$V7,38:$V8,42:$V9,48:$Va,49:$Vb,50:$Vc,52:$Vd,53:$Ve,54:$Vf,57:$Vg},{6:38,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,25:$V0,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,37:$V7,38:$V8,40:[1,201],42:$V9,48:$Va,49:$Vb,50:$Vc,52:$Vd,53:$Ve,54:$Vf,57:$Vg},{6:38,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,25:$V0,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,37:$V7,38:$V8,40:[1,202],42:$V9,48:$Va,49:$Vb,50:$Vc,52:$Vd,53:$Ve,54:$Vf,57:$Vg},o($VM,[2,52]),o($Vh,[2,51]),{8:[2,60]},o($Vh,[2,31],{41:[1,203]}),{40:[1,204]},o($Vh,[2,36]),{25:$Vj,27:205,35:$Vk,61:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt},o($Vh,[2,37]),{46:[1,206],61:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK},{4:207,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,25:$V0,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,37:$V7,38:$V8,42:$V9,48:$Va,49:$Vb,50:$Vc,52:$Vd,53:$Ve,54:$Vf,57:$Vg},o($Vh,[2,41]),{36:[1,208],61:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK},o($Vh,[2,43]),{36:[1,209],61:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK},{36:[1,210],61:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK},{6:38,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,25:$V0,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,37:$V7,38:$V8,40:[1,211],42:$V9,48:$Va,49:$Vb,50:$Vc,52:$Vd,53:$Ve,54:$Vf,57:$Vg},o($Vh,[2,49]),o($Vh,[2,50]),{6:213,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,25:$V0,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,37:$V7,38:$V8,39:[1,212],42:$V9,48:$Va,49:$Vb,50:$Vc,52:$Vd,53:$Ve,54:$Vf,57:$Vg},o($Vh,[2,35]),{46:[1,214],61:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK},{4:215,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,25:$V0,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,37:$V7,38:$V8,42:$V9,48:$Va,49:$Vb,50:$Vc,52:$Vd,53:$Ve,54:$Vf,57:$Vg},{6:38,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,25:$V0,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,37:$V7,38:$V8,40:[2,40],42:$V9,48:$Va,49:$Vb,50:$Vc,52:$Vd,53:$Ve,54:$Vf,57:$Vg},{8:[2,42]},{39:[1,216]},{39:[1,217]},o($Vh,[2,48]),{4:218,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,25:$V0,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,37:$V7,38:$V8,42:$V9,48:$Va,49:$Vb,50:$Vc,52:$Vd,53:$Ve,54:$Vf,57:$Vg},o($Vh,[2,34]),{4:219,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,25:$V0,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,37:$V7,38:$V8,42:$V9,48:$Va,49:$Vb,50:$Vc,52:$Vd,53:$Ve,54:$Vf,57:$Vg},o($VS,[2,39],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,6:38,25:$V0,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,37:$V7,38:$V8,42:$V9,48:$Va,49:$Vb,50:$Vc,52:$Vd,53:$Ve,54:$Vf,57:$Vg}),{4:220,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,25:$V0,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,37:$V7,38:$V8,42:$V9,48:$Va,49:$Vb,50:$Vc,52:$Vd,53:$Ve,54:$Vf,57:$Vg},{4:221,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,25:$V0,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,37:$V7,38:$V8,42:$V9,48:$Va,49:$Vb,50:$Vc,52:$Vd,53:$Ve,54:$Vf,57:$Vg},{6:38,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,25:$V0,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,37:$V7,38:$V8,40:[1,222],42:$V9,48:$Va,49:$Vb,50:$Vc,52:$Vd,53:$Ve,54:$Vf,57:$Vg},o($VS,[2,38],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,6:38,25:$V0,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,37:$V7,38:$V8,42:$V9,48:$Va,49:$Vb,50:$Vc,52:$Vd,53:$Ve,54:$Vf,57:$Vg}),{6:38,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,25:$V0,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,37:$V7,38:$V8,40:[1,223],42:$V9,48:$Va,49:$Vb,50:$Vc,52:$Vd,53:$Ve,54:$Vf,57:$Vg},{6:38,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,25:$V0,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,37:$V7,38:$V8,40:[1,224],42:$V9,48:$Va,49:$Vb,50:$Vc,52:$Vd,53:$Ve,54:$Vf,57:$Vg},o($Vh,[2,33]),o($Vh,[2,44]),o($Vh,[2,45])],
defaultActions: {28:[2,46],29:[2,47],37:[2,1],82:[2,55],120:[2,54],122:[2,62],123:[2,29],124:[2,30],171:[2,61],187:[2,60],208:[2,42]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* Ignoro los comentarios simples */
break;
case 1:/*Ignorar comentarios con multiples lneas*/
break;
case 2: console.log("Reconocio : "+ yy_.yytext); return 64
break;
case 3: console.log("Reconocio : "+ yy_.yytext); return 65
break;
case 4: console.log("Reconocio : "+ yy_.yytext); return 61
break;
case 5: console.log("Reconocio : "+ yy_.yytext); return 'INCRE'
break;
case 6: console.log("Reconocio : "+ yy_.yytext); return 'DECRE'
break;
case 7: console.log("Reconocio : "+ yy_.yytext); return 63
break;
case 8: console.log("Reconocio : "+ yy_.yytext); return 66
break;
case 9: console.log("Reconocio : "+ yy_.yytext); return 35
break;
case 10: console.log("Reconocio : "+ yy_.yytext); return 36
break;
case 11: console.log("Reconocio : "+ yy_.yytext); return 58
break;
case 12: console.log("Reconocio : "+ yy_.yytext); return 59
break;
case 13: console.log("Reconocio : "+ yy_.yytext); return 39
break;
case 14: console.log("Reconocio : "+ yy_.yytext); return 40
break;
case 15: console.log("Reconocio : "+ yy_.yytext); return 8
break;
case 16: console.log("Reconocio : "+ yy_.yytext); return 'PUNTO'
break;
case 17: console.log("Reconocio : "+ yy_.yytext); return 28
break;
case 18: console.log("Reconocio : "+ yy_.yytext); return 26
break;
case 19: console.log("Reconocio : "+ yy_.yytext); return 71
break;
case 20: console.log("Reconocio : "+ yy_.yytext); return 72
break;
case 21: console.log("Reconocio : "+ yy_.yytext); return 67
break;
case 22: console.log("Reconocio : "+ yy_.yytext); return 68
break;
case 23: console.log("Reconocio : "+ yy_.yytext); return 69
break;
case 24: console.log("Reconocio : "+ yy_.yytext); return 70
break;
case 25: console.log("Reconocio : "+ yy_.yytext); return 74
break;
case 26: console.log("Reconocio : "+ yy_.yytext); return 73
break;
case 27: console.log("Reconocio : "+ yy_.yytext); return 62
break;
case 28: console.log("Reconocio : "+ yy_.yytext); return 46
break;
case 29: console.log("Reconocio : "+ yy_.yytext); return 'INTERRC'
break;
case 30: console.log("Reconocio : "+ yy_.yytext); return 'NUMERAL'
break;
case 31: console.log("Reconocio : "+ yy_.yytext); return 'CONCATENACION'
break;
case 32: console.log("Reconocio : "+ yy_.yytext); return 'REPETICION'
break;
case 33: console.log("Reconocio : "+ yy_.yytext); return 81
break;
case 34: console.log("Reconocio : "+ yy_.yytext); return 29
break;
case 35: console.log("Reconocio : "+ yy_.yytext); return 30
break;
case 36: console.log("Reconocio : "+ yy_.yytext); return 31
break;
case 37: console.log("Reconocio : "+ yy_.yytext); return 32
break;
case 38: console.log("Reconocio : "+ yy_.yytext); return 33
break;
case 39: console.log("Reconocio : "+ yy_.yytext); return 38
break;
case 40: console.log("Reconocio : "+ yy_.yytext); return 41
break;
case 41: console.log("Reconocio : "+ yy_.yytext); return 42
break;
case 42: console.log("Reconocio : "+ yy_.yytext); return 'LIST'
break;
case 43: console.log("Reconocio : "+ yy_.yytext); return 'NEW'
break;
case 44: console.log("Reconocio : "+ yy_.yytext); return 79
break;
case 45: console.log("Reconocio : "+ yy_.yytext); return 80
break;
case 46: console.log("Reconocio : "+ yy_.yytext); return 34
break;
case 47: console.log("Reconocio : "+ yy_.yytext); return 'PRINTF'
break;
case 48: console.log("Reconocio : "+ yy_.yytext); return 37
break;
case 49: console.log("Reconocio : "+ yy_.yytext); return 48
break;
case 50: console.log("Reconocio : "+ yy_.yytext); return 49
break;
case 51: console.log("Reconocio : "+ yy_.yytext); return 50
break;
case 52: console.log("Reconocio : "+ yy_.yytext); return 51
break;
case 53: console.log("Reconocio : "+ yy_.yytext); return 54
break;
case 54: console.log("Reconocio : "+ yy_.yytext); return 'PARSE'
break;
case 55: console.log("Reconocio : "+ yy_.yytext); return 'TOINT'
break;
case 56: console.log("Reconocio : "+ yy_.yytext); return 'TODOUBLE'
break;
case 57: console.log("Reconocio : "+ yy_.yytext); return 'STRING_CAST'
break;
case 58: console.log("Reconocio : "+ yy_.yytext); return 'TYPEOF'
break;
case 59: console.log("Reconocio : "+ yy_.yytext); return 'FUCTION'
break;
case 60: console.log("Reconocio : "+ yy_.yytext); return 'POW'
break;
case 61: console.log("Reconocio : "+ yy_.yytext); return 'SQRT'
break;
case 62: console.log("Reconocio : "+ yy_.yytext); return 'SIN'
break;
case 63: console.log("Reconocio : "+ yy_.yytext); return 'COS'
break;
case 64: console.log("Reconocio : "+ yy_.yytext); return 'TAN'
break;
case 65: console.log("Reconocio : "+ yy_.yytext); return 'LOG10'
break;
case 66: console.log("Reconocio : "+ yy_.yytext); return 'PUSH'
break;
case 67: console.log("Reconocio : "+ yy_.yytext); return 'POP'
break;
case 68: console.log("Reconocio : "+ yy_.yytext); return 'LENGTH'
break;
case 69: console.log("Reconocio : "+ yy_.yytext); return 'CARACTEROFPOSITION'
break;
case 70: console.log("Reconocio : "+ yy_.yytext); return 'SUBSTRING'
break;
case 71: console.log("Reconocio : "+ yy_.yytext); return 'TOUPPERCASE'
break;
case 72: console.log("Reconocio : "+ yy_.yytext); return 'TOLOWERCASE'
break;
case 73: console.log("Reconocio : "+ yy_.yytext); return 47
break;
case 74: console.log("Reconocio : "+ yy_.yytext); return 45
break;
case 75: console.log("Reconocio : "+ yy_.yytext); return 52
break;
case 76: console.log("Reconocio : "+ yy_.yytext); return 53
break;
case 77: console.log("Reconocio : "+ yy_.yytext); return 57
break;
case 78: console.log("Reconocio : "+ yy_.yytext); return 'STRUCT'
break;
case 79: console.log("Reconocio : "+ yy_.yytext); return 75
break;
case 80: console.log("Reconocio : "+ yy_.yytext); return 76
break;
case 81: console.log("Reconocio : "+ yy_.yytext); return 77
break;
case 82: console.log("Reconocio : "+ yy_.yytext); return 25
break;
case 83: console.log("Reconocio : "+ yy_.yytext); return 78
break;
case 84:/* skip whitespace */
break;
case 85:return 5
break;
case 86:return 'ERROR'
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:\/\*((\*+[^/*])|([^*]))*\**\*\/)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:%)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:;)/,/^(?:\.)/,/^(?:,)/,/^(?:=)/,/^(?:==)/,/^(?:!=)/,/^(?:<)/,/^(?:<=)/,/^(?:>)/,/^(?:>=)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!)/,/^(?::)/,/^(?:\?)/,/^(?:#)/,/^(?:&)/,/^(?:\^)/,/^(?:null\b)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:char\b)/,/^(?:String\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:list\b)/,/^(?:new\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:print\b)/,/^(?:printf\b)/,/^(?:println\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:void\b)/,/^(?:parse\b)/,/^(?:toInt\b)/,/^(?:toDouble\b)/,/^(?:string\b)/,/^(?:typeof\b)/,/^(?:function\b)/,/^(?:pow\b)/,/^(?:sqrt\b)/,/^(?:sin\b)/,/^(?:cos\b)/,/^(?:tan\b)/,/^(?:log10\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:length\b)/,/^(?:caracterOfPosition\b)/,/^(?:subString\b)/,/^(?:toUppercase\b)/,/^(?:toLowercase\b)/,/^(?:default\b)/,/^(?:case\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:struct\b)/,/^(?:([0-9]+(\.[0-9]+)?\b))/,/^(?:([0-9]+))/,/^(?:(("((\\([\'\"\\ntr]))|([^\"\\]+))*")))/,/^(?:(([a-zA-ZÑñ]+)(([a-zA-ZÑñ]+)|([0-9]+)|_)*))/,/^(?:(('((\\([\\ntr]))|([^\'\\]))')))/,/^(?:[\s\r\n\t])/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Gramatica;
exports.Parser = Gramatica.Parser;
exports.parse = function () { return Gramatica.parse.apply(Gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}